package com.explosivepomegranate.rest.api.service;

import com.explosivepomegranate.rest.api.model.Author;
import com.explosivepomegranate.rest.api.model.Book;
import com.explosivepomegranate.rest.api.model.Borrowed;
import com.explosivepomegranate.rest.api.model.Category;
import com.explosivepomegranate.rest.api.repository.AuthorRepository;
import com.explosivepomegranate.rest.api.repository.BookRepository;
import com.explosivepomegranate.rest.api.repository.BorrowedRepository;
import com.explosivepomegranate.rest.api.repository.CategoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

@Service
public class BookService {
    @Autowired // This means to get the bean called bookRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;
    @Autowired
    private AuthorRepository authorRepository;
    @Autowired
    private CategoryRepository categoryRepository;
    @Autowired
    private BorrowedRepository borrowedRepository;

    /**
     * @author: Salvatore
     * */
    public List<Category> getAllCategories() { return categoryRepository.findAll(); }

    /**
     * @author: Salvatore
     *
     * */
    public List<Author> getAllAuthors() { return authorRepository.findAll(); }

    /**
     * @author: Salvatore
     *
     * */
    public List<Book> getAllBooks() { return bookRepository.findAll(); }

    /**
     * @author Clelia
     * add a new book --------still a draft, model is still incomplete and this method will require some work
     * */
    public @ResponseBody
    Book addNewBook(Book sendBookInfo) {
        Book book = new Book();
        book.setISBN(sendBookInfo.getISBN());
        book.setTitle(sendBookInfo.getTitle());
        book.setDescription(sendBookInfo.getDescription());
        book.setYear(sendBookInfo.getYear());

        bookRepository.save(book);
        return book;
    }

    /**
     * @author Sonja
     * UC6 find book by id
     * @return Book object found with given id
     **/
    public Book getBookByID (int bookId){
        //todo error handling?
        Book book = bookRepository.findById(bookId).get();
        return book;
    }

    /**
     * @author: Salvatore
     * Fetches all books from a given category ID(UC5)
     * */
    public List<Book> getBookByCategory(int categoryId){
        //Category category = categoryRepository.findById(categoryId).get();
        //return category.getBooks();
        return bookRepository.findByCategories_Id(categoryId);
    }

    /**
     * @author: Salvatore
     * Fetches all books from a given author ID(UC5)
     * */
    public List<Book> getBookByAuthor(int authorId){
        //Author author = authorRepository.findById(authorId).get();
        //return author.getBooks();
        return bookRepository.findByAuthors_Id(authorId);
    }
}
