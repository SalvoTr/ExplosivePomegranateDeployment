package com.explosivepomegranate.rest.api.controller;

import com.explosivepomegranate.rest.api.model.Book;
import com.explosivepomegranate.rest.api.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.Date;
import java.util.List;

@Controller
public class BookController {

    @Autowired // This means to get the bean called bookRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    /**
     * @author: Salvatore
     * I have no idea what I'm doing.
     * */
    @GetMapping(path="/allCategories", produces = "application/json")


    @GetMapping(path="/allAuthors", produces = "application/json")


    /**
     * @author: Salvatore
     * Noticed too late that Clelia had done this already
     * Basically only difference is that I used a List that I added in Book.java (like template/example from AM)
     * */
    @GetMapping(path="/allBooks",  produces = "application/json")
    public List<Book> getBooks() {
        return bookRepository.findAll();
    }


    /**
     * @author: Clelia
     * get a list of all Books in the DB
     * */
    @GetMapping(path="/allBooks")
    public @ResponseBody Iterable<Book> getAllBooks() {
        return bookRepository.findAll();
    }

    /**
     * @author Clelia
     * add a new book --------still a draft, model is still incomplete and this method will require some work
     * */
    @PostMapping(path = "/addBook")
    public @ResponseBody Book addNewBook(@RequestBody Book sendBookInfo) {
        Book book = new Book();
        book.setISBN(sendBookInfo.getISBN());
        book.setTitle(sendBookInfo.getTitle());
        book.setDescription(sendBookInfo.getDescription());
        book.setYear(sendBookInfo.getYear());

        bookRepository.save(book);
        return book;
    }
}
