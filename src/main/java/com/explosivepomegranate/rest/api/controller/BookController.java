package com.explosivepomegranate.rest.api.controller;

import com.explosivepomegranate.rest.api.model.Author;
import com.explosivepomegranate.rest.api.model.Book;
import com.explosivepomegranate.rest.api.model.Borrowed;
import com.explosivepomegranate.rest.api.model.Category;
import com.explosivepomegranate.rest.api.repository.AuthorRepository;
import com.explosivepomegranate.rest.api.repository.BookRepository;
import com.explosivepomegranate.rest.api.repository.BorrowedRepository;
import com.explosivepomegranate.rest.api.repository.CategoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class BookController {

    //Autowired will get the beans called xxxRepository. These are auto-generated by Spring & used for handling data
    @Autowired
    private BookRepository bookRepository;
    @Autowired
    private AuthorRepository authorRepository;
    @Autowired
    private CategoryRepository categoryRepository;
    @Autowired
    private BorrowedRepository borrowedRepository;

    /**
     * @author: Salvatore
     * returns list of all categories (UC5)
     * */
    @GetMapping(path="/allCategories", produces = "application/json")
    public List<Category> getCategories() { return categoryRepository.findAll(); }


    /**
     * @author: Salvatore
     * returns list of all authors (UC5)
     * */
    @GetMapping(path="/allAuthors", produces = "application/json")
    public List<Author> getAuthors() { return authorRepository.findAll(); }


    /**
     * @author: Salvatore
     * returns list of all books (UC5/6)
     * */
    @GetMapping(path="/allBooks",  produces = "application/json")
    public List<Book> getBooks() { return bookRepository.findAll(); }

    /**
     * @author: Salvatore
     * Fetches all books from a given category ID(UC5)
     * TODO: Each book item is listed a duplicate amount of times as much as the book item has borrowers
     * */
    @GetMapping (path="/categoryBooks/{category_id}", produces = "application/json")
    public List<Book> getBookByCategory(@PathVariable(value = "category_id") String categoryId){
        Category category = categoryRepository.findById(Integer.parseInt(categoryId)).get();
        return category.getBooks();
    }

    /**
     * @author: Salvatore
     * Fetches all books from a given author ID(UC5)
     * TODO: Same problem as above
     * */
    @GetMapping (path="/authorBooks/{author_id}", produces = "application/json")
    public List<Book> getBookByAuthor(@PathVariable(value = "author_id") String authorId){
        Author author = authorRepository.findById(Integer.parseInt(authorId)).get();
        return author.getBooks();
    }


    /**
     * @author Clelia
     * add a new book --------still a draft, model is still incomplete and this method will require some work
     * */
    @PostMapping(path = "/addBook")
    public @ResponseBody Book addNewBook(@RequestBody Book sendBookInfo) {
        Book book = new Book();
        book.setISBN(sendBookInfo.getISBN());
        book.setTitle(sendBookInfo.getTitle());
        book.setDescription(sendBookInfo.getDescription());
        book.setYear(sendBookInfo.getYear());

        bookRepository.save(book);
        return book;
    }

    /**
     * @author Sonja
     * find book by id (UC6)
     * @return Book object found with given id
     **/
    @GetMapping (path="/bookInfo/{book_id}")
    public @ResponseBody
    Book getBookByID (@PathVariable (value="book_id") String bookId){
        //todo error handling?
        return bookRepository.findById(Integer.parseInt(bookId)).get();
    }

    /**
     * @author: Salvatore
     * returns list of all borrowed books (UC11)
     * */
    @GetMapping (path = "/allBorrowed", produces = "application/json")
    public List<Borrowed> getBorrowed() { return borrowedRepository.findAll(); }



}
